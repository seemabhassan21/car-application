version: "3.9"

services:
  web:
    build: .
    container_name: carapp_web
    env_file:
      - .env
    environment:
      NEO4J_HOST: neo4j
    ports:
      - "8000:8000"
    command: /app/start.sh 
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s  

  worker:
    build: .
    container_name: carapp_worker
    env_file:
      - .env
    environment:
      NEO4J_HOST: neo4j
    command: celery -A app.tasks.celery_worker.celery worker --loglevel=info
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
    healthcheck: 
      test: ["CMD-SHELL", "pgrep celery || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  beat:
    build: .
    container_name: carapp_beat
    env_file:
      - .env
    environment:
      NEO4J_HOST: neo4j
    command: celery -A app.tasks.celery_worker.celery beat --loglevel=info
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'celery beat' || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  neo4j:
    image: neo4j:5
    container_name: carapp_neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD}
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10 
      start_period: 30s  

  redis:
    image: redis:7 
    container_name: carapp_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes: 
      - redis_data:/data

volumes:
  neo4j_data:
    driver: local
  redis_data: 
    driver: local

networks:
  backend:
    driver: bridge
