version: "3.9"

services:
  web:
    build: .
    container_name: carapp_web
    env_file:
      - .env
    environment:
      DB_HOST: db
    ports:
      - "8000:8000"
    volumes:
      - ./migrations:/app/migrations
    command: /app/start.sh 
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s  

  worker:
    build: .
    container_name: carapp_worker
    env_file:
      - .env
    environment:
      DB_HOST: db
    command: /app/celery_worker.sh 
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend
    healthcheck: 
      test: ["CMD-SHELL", "pgrep celery || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  beat:
    build: .
    container_name: carapp_beat
    env_file:
      - .env
    environment:
      DB_HOST: db
    command: /app/celery_beat.sh 
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend

  db:
    image: mysql:8.0
    container_name: carapp_db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}", "-h", "localhost"]  
      interval: 10s
      timeout: 5s
      retries: 10 
      start_period: 30s  

  redis:
    image: redis:7 
    container_name: carapp_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes: 
      - redis_data:/data

volumes:
  mysql_data:
    driver: local
  redis_data: 
    driver: local

networks:
  backend:
    driver: bridge